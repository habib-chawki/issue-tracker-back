package com.habibInc.issueTracker.sprint;

import com.habibInc.issueTracker.issue.Issue;
import com.habibInc.issueTracker.issue.IssueRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import static org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.*;

@DataJpaTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
public class SprintRepositoryTest {

    @Autowired
    SprintRepository sprintRepository;

    @Autowired
    IssueRepository issueRepository;

    Sprint sprint;

    @BeforeEach
    public void setup() {
        sprint = Sprint.builder()
                .name("Primary sprint")
                .goal("Primary sprint goal")
                .startDate(LocalDate.now())
                .endDate(LocalDate.now().plusDays(15))
                .build();
    }

    @Test
    public void itShouldSaveSprint() {
        // when the sprint is saved
        Sprint savedSprint = sprintRepository.save(sprint);

        // then expect its id to have been autogenerated
        assertThat(savedSprint).isEqualToComparingOnlyGivenFields(sprint);
        assertThat(savedSprint.getId()).isNotNull().isPositive();
    }

    @Test
    public void itShouldFindSprintById() {
        // given the sprint is saved
        sprint = sprintRepository.save(sprint);

        // when the sprint is queried by id
        Optional<Sprint> sprintOptional = sprintRepository.findById(sprint.getId());

        // then the sprint should be retrieved successfully
        assertThat(sprintOptional.get()).isEqualTo(sprint);
    }

    @Test
    public void itShouldFindSprintAlongWithItsIssues() {
        // given a list of issues
        List<Issue> issues = List.of(
                Issue.builder().summary("issue 1").build(),
                Issue.builder().summary("issue 2").build(),
                Issue.builder().summary("issue 3").build()
        );

        // given the issues are saved
        issueRepository.saveAll(issues);

        // given the sprint issues are set
        sprint.setBacklog(issues);

        // given the sprint is saved
        sprintRepository.save(sprint);

        // when the sprint is queried by id
        Optional<Sprint> sprintOptional = sprintRepository.findById(sprint.getId());

        // then the sprint should be retrieved along with its issues
        assertThat(sprintOptional.get().getBacklog()).containsExactlyElementsOf(issues);
    }

}
