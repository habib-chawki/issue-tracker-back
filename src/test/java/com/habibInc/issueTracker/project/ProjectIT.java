package com.habibInc.issueTracker.project;

import com.habibInc.issueTracker.issue.IssueRepository;
import com.habibInc.issueTracker.security.JwtUtil;
import com.habibInc.issueTracker.user.User;
import com.habibInc.issueTracker.user.UserRepository;
import com.habibInc.issueTracker.user.UserService;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ProjectIT {

    @Autowired
    TestRestTemplate restTemplate;

    @Autowired
    ProjectService projectService;

    @Autowired
    UserService userService;

    @Autowired
    ProjectRepository projectRepository;

    @Autowired
    IssueRepository issueRepository;

    @Autowired
    UserRepository userRepository;

    @Autowired
    JwtUtil jwtUtil;

    User authenticatedUser;
    String token;
    HttpHeaders headers;

    Project project;

    @BeforeAll
    public void authSetup() {
        // create a user to authenticate
        authenticatedUser = new User();
        authenticatedUser.setEmail("auth.user@email.com");
        authenticatedUser.setPassword("auth_password");

        // save the user to pass authorization
        userService.createUser(authenticatedUser);

        // generate an auth token signed with the user email
        token = jwtUtil.generateToken(authenticatedUser.getEmail());

        // set up the authorization header with the auth token
        headers = new HttpHeaders();
        headers.add(JwtUtil.HEADER, JwtUtil.TOKEN_PREFIX + token);
    }

    @BeforeEach
    public void setup() {
        project = new Project();
        project.setName("Important project!");
    }

    @Nested
    @DisplayName("POST")
    class Post {

        private final String url = "/projects";
        HttpEntity<Project> httpEntity;

        @BeforeEach
        public void setup() {
            httpEntity = new HttpEntity<>(project, headers);
        }

        @Test
        public void itShouldCreateProject() {
            // when a POST request to create a new project is made
            ResponseEntity<Project> response =
                    restTemplate.postForEntity(url, httpEntity, Project.class);

            // then expect the response to be the created project with an autogenerated id and the authenticated user set as owner
            assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
            assertThat(response.getBody().getId()).isNotNull().isPositive();
        }

        @Test
        public void whenProjectIsCreated_itShouldSetAuthenticatedUserAsProjectOwner() {
            // given the POST request to create the project
            restTemplate.postForEntity(url, httpEntity, Project.class);

            // expect the authenticated user to have been set as project owner

        }
    }

    @Nested
    @DisplayName("GET")
    class Get {

    }

    @AfterEach
    public void teardown() {
        issueRepository.deleteAll();
        projectRepository.deleteAll();
    }

    @AfterAll
    public void authTeardown() {
        userRepository.deleteAll();
    }
}
