package com.habibInc.issueTracker.board;

import com.habibInc.issueTracker.security.JwtUtil;
import com.habibInc.issueTracker.user.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;

import static org.assertj.core.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class BoardIT {

    @Autowired
    TestRestTemplate restTemplate;

    @Autowired
    JwtUtil jwtUtil;

    User authenticatedUser;
    HttpHeaders httpHeaders;

    Board board;

    @BeforeEach
    public void auth() {
        // set up the authenticated user
        authenticatedUser = User.builder()
                .userName("authenticated_user")
                .email("authenticated@user.in")
                .password("auth_pass")
                .build();

        // generate an auth token for the authenticated user
        String token = jwtUtil.generateToken(authenticatedUser.getEmail());

        // set up the authorization header
        httpHeaders = new HttpHeaders();
        httpHeaders.add(JwtUtil.HEADER, JwtUtil.TOKEN_PREFIX + token);
    }

    @BeforeEach
    public void setup() {
        board = new Board();
        board.setName("ScrumOrKanban");
    }

    @Test
    public void itShouldCreateBoard() {
        // given the url endpoint and the request
        String url = "/boards";
        HttpEntity<Board> httpEntity = new HttpEntity<>(board, httpHeaders);

        // when a post request is made to create a new board
        ResponseEntity<Board> response =
                restTemplate.exchange(url, HttpMethod.POST, httpEntity, Board.class);

        // then the board should be created successfully with an autogenerated id
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response).isEqualToComparingOnlyGivenFields(board);
        assertThat(response.getBody().getId()).isNotNull().isPositive();
    }
}
