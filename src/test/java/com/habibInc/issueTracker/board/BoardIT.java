package com.habibInc.issueTracker.board;

import com.habibInc.issueTracker.column.Column;
import com.habibInc.issueTracker.column.ColumnRepository;
import com.habibInc.issueTracker.exceptionhandler.ApiError;
import com.habibInc.issueTracker.exceptionhandler.ResourceNotFoundException;
import com.habibInc.issueTracker.security.JwtUtil;
import com.habibInc.issueTracker.sprint.Sprint;
import com.habibInc.issueTracker.sprint.SprintRepository;
import com.habibInc.issueTracker.user.User;
import com.habibInc.issueTracker.user.UserRepository;
import com.habibInc.issueTracker.user.UserService;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class BoardIT {

    @Autowired
    TestRestTemplate restTemplate;

    @Autowired
    JwtUtil jwtUtil;

    @Autowired
    BoardService boardService;

    @Autowired
    BoardRepository boardRepository;

    @Autowired
    UserService userService;

    @Autowired
    UserRepository userRepository;

    @Autowired
    ColumnRepository columnRepository;

    @Autowired
    SprintRepository sprintRepository;

    User authenticatedUser;
    HttpHeaders httpHeaders;

    Sprint sprint;
    Board board;

    @BeforeAll
    public void authSetup() {
        // set up the authenticated user
        authenticatedUser = User.builder()
                .userName("authenticated_user")
                .email("authenticated@user.in")
                .password("auth_pass")
                .build();

        // save the user to pass the authorization filter
        userService.createUser(authenticatedUser);

        // generate an auth token for the authenticated user
        String token = jwtUtil.generateToken(authenticatedUser.getEmail());

        // set up the authorization header
        httpHeaders = new HttpHeaders();
        httpHeaders.add(JwtUtil.HEADER, JwtUtil.TOKEN_PREFIX + token);
    }

    @BeforeEach
    public void setup() {
        sprint = new Sprint();
        sprint.setName("sprint 1");

        sprint = sprintRepository.save(sprint);

        board = new Board();
        board.setName("ScrumOrKanban");
    }

    @Nested
    @DisplayName("POST")
    class Post {

        private String url;
        private HttpEntity<Board> httpEntity;

        @BeforeEach
        public void setup() {
            url = "/boards?sprint=" + sprint.getId();
            httpEntity = new HttpEntity<>(board, httpHeaders);
        }

        @Test
        public void itShouldCreateBoard() {
            // when a POST request is made to create a new board
            ResponseEntity<Board> response =
                    restTemplate.exchange(url, HttpMethod.POST, httpEntity, Board.class);

            // then the board should be created successfully with an autogenerated id
            assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
            assertThat(response).isEqualToComparingOnlyGivenFields(board);
            assertThat(response.getBody().getId()).isNotNull().isPositive();
        }

        @Test
        public void givenCreateBoard_itShouldSetAuthenticatedUserAsBoardOwner() {
            // when the board is created via a POST request
            ResponseEntity<Board> response =
                    restTemplate.exchange(url, HttpMethod.POST, httpEntity, Board.class);

            // then the authenticated user should have been set as board owner
            assertThat(boardService.getBoardById(response.getBody().getId()).getOwner())
                    .isEqualTo(authenticatedUser);
        }

        @Test
        public void givenCreateBoard_itShouldCreateTodoColumn() {
            // when the board is created
            ResponseEntity<Board> response =
                    restTemplate.exchange(url, HttpMethod.POST, httpEntity, Board.class);

            // then a to do column should have been created along with it
            assertThat(((List<Column>) columnRepository.findAll()).get(0).getTitle()).isEqualTo("To Do");
        }
    }

    @Nested
    @DisplayName("GET")
    class Get {

        String url;
        HttpEntity<Void> httpEntity;

        @BeforeEach
        public void setup() {
            // create the board
            board = boardService.createBoard(sprint.getId(), board, authenticatedUser);

            // set up the request
            url = "/boards/" + board.getId();
            httpEntity = new HttpEntity<>(httpHeaders);
        }

        @Test
        @DisplayName("Get the board by id")
        public void itShouldGetBoardById() {
            // when a GET request is made to fetch the board by id
            ResponseEntity<Board> response =
                    restTemplate.exchange(url, HttpMethod.GET, httpEntity, Board.class);

            // then the board should be retrieved successfully
            assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
            assertThat(response.getBody().getId()).isNotNull().isPositive();
            assertThat(response.getBody()).isEqualTo(board);
        }

        @Test
        @DisplayName("Get the board by id along with the list of its column")
        public void itShouldGetBoardByIdAlongWithItsColumns() {
            // given a list of columns
            List<Column> columns = List.of(
                    Column.builder().title("column 1").board(board).build(),
                    Column.builder().title("column 2").board(board).build(),
                    Column.builder().title("column 3").board(board).build(),
                    Column.builder().title("column 4").board(board).build()
            );

            columns = (List<Column>) columnRepository.saveAll(columns);

            // when a GET request is made to fetch the board by id
            ResponseEntity<Board> response =
                    restTemplate.exchange(url, HttpMethod.GET, httpEntity, Board.class);

            // then the board should be retrieved along with a list of columns
            assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
            assertThat(response.getBody().getColumns()).containsAll(columns);

            // the first column of the board should be the to do column
            assertThat(response.getBody().getColumns().get(0).getTitle()).isEqualTo("To Do");
        }
    }

    @Nested
    @DisplayName("DELETE")
    class Delete {
        HttpEntity<Void> httpEntity;

        @BeforeEach
        public void setup() {
            httpEntity = new HttpEntity<>(httpHeaders);
        }

        @Test
        @DisplayName("Delete board by id")
        public void itShouldDeleteBoardById() {
            // given a board
            board = boardService.createBoard(sprint.getId(), board, authenticatedUser);

            // given the request
            String url = "/boards/" + board.getId();

            // when a DELETE request is made to delete the board by id
            ResponseEntity<String> response =
                    restTemplate.exchange(url, HttpMethod.DELETE, httpEntity, String.class);

            // then the board should be deleted successfully
            assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

            assertThatExceptionOfType(ResourceNotFoundException.class)
                    .isThrownBy(() -> boardService.getBoardById(board.getId()))
                    .withMessageContaining("Board not found");
        }

        @Test
        @DisplayName("Delete board along with its columns")
        public void itShouldDeleteBoardByIdAlongWithAllOfItsColumns() {
            // given the board is created
            board = boardService.createBoard(sprint.getId(), board, authenticatedUser);

            // given a list of columns belonging to the board
            columnRepository.saveAll(
                    List.of(
                            Column.builder().title("column 1").board(board).build(),
                            Column.builder().title("column 2").board(board).build(),
                            Column.builder().title("column 3").board(board).build(),
                            Column.builder().title("column 4").board(board).build()
                    )
            );

            // expect the columns to have been saved
            Iterable<Column> columns = columnRepository.findAll();
            assertThat(columns).isNotEmpty();

            // given the DELETE request
            String url = "/boards/" + board.getId();

            // when the request is made to delete the board by id
            restTemplate.exchange(url, HttpMethod.DELETE, httpEntity, Void.class);

            // then expect the board's list of columns to have been deleted
            columns = columnRepository.findAll();
            assertThat(columns).isEmpty();
        }

        @Test
        @DisplayName("Disallow deleting boards owned by other users")
        public void givenDeleteBoardById_whenAuthenticatedUserIsNotTheBoardOwner_itShouldReturnForbiddenOperationError() {
            // given a random user
            User notAuthenticatedUser = User.builder().email("not@authenticated.user").password("forbid").build();

            // save the random user
            notAuthenticatedUser = userService.createUser(notAuthenticatedUser);

            // given a board that belongs to a user other than the authenticated user
            board = boardService.createBoard(sprint.getId(), board, notAuthenticatedUser);

            // given the DELETE request
            String url = "/boards/" + board.getId();

            // when the request is made to delete the board by id
            ResponseEntity<ApiError> response =
                    restTemplate.exchange(url, HttpMethod.DELETE, httpEntity, ApiError.class);

            // then expect a 403 forbidden operation error
            assertThat(response.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
            assertThat(response.getBody().getErrorMessage()).contains("Forbidden operation");
        }
    }

    @AfterEach
    public void teardown() {
        boardRepository.deleteAll();
        sprintRepository.deleteAll();
    }

    @AfterAll
    public void authTeardown() {
        userRepository.deleteAll();
    }
}
