package com.habibInc.issueTracker.comment;

import com.habibInc.issueTracker.exceptionhandler.ApiError;
import com.habibInc.issueTracker.issue.Issue;
import com.habibInc.issueTracker.issue.IssueRepository;
import com.habibInc.issueTracker.issue.IssueType;
import com.habibInc.issueTracker.user.User;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.time.LocalDateTime;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class CommentIT {
    @Autowired
    TestRestTemplate restTemplate;

    @Autowired
    IssueRepository issueRepository;

    User owner;
    Issue issue, createdIssue;
    Comment comment, comment2;

    @BeforeEach
    public void setup() {
        // set up the comment owner
        owner = new User();

        owner.setEmail("Me@email.com");
        owner.setUserName("Jon_Doe");

        // set up an issue
        issue = new Issue();

        issue.setType(IssueType.BUG);
        issue.setSummary("This is an issue");

        // create the issue
        createdIssue = issueRepository.save(issue);

        // set up a new comment
        comment = new Comment();

        comment.setIssue(createdIssue);
        comment.setContent("My comment");
        comment.setOwner(owner);
        comment.setCreationTime(LocalDateTime.now());
        comment.setUpdateTime(LocalDateTime.now());

        // set up another comment without an issue
        comment2 = new Comment();

        comment2.setContent("Another comment");
        comment2.setOwner(owner);
        comment2.setCreationTime(LocalDateTime.now());
        comment2.setUpdateTime(LocalDateTime.now());
    }

    @Test
    public void itShouldCreateComment() {
        String baseUrl = String.format("/issues/%s/comments", createdIssue.getId());

        // make post request to create a new comment
        ResponseEntity<Comment> response =
                restTemplate.postForEntity(baseUrl, comment, Comment.class);

        // expect comment to have been created with an autogenerated positive id
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody().getId()).isNotNull().isPositive();
        assertThat(response.getBody()).isEqualToComparingOnlyGivenFields(comment);
    }

    @Test
    public void whenIssueDoesNotExist_itShouldReturnIssueNotFoundError() {
        String baseUrl = String.format("/issues/%s/comments", createdIssue.getId());

        // when a post request is made to add a new comment with an incorrect issue id
        ResponseEntity<ApiError> response =
                restTemplate.postForEntity(baseUrl, comment2, ApiError.class);

        // then a 404 'issue not found' error should be returned
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
        assertThat(response.getBody().getErrorMessage()).containsIgnoringCase("Issue not found");
        assertThat(response.getBody().getTimestamp()).isNotNull();
    }

    @Test
    public void whenIssueIdIsInvalid_itShouldReturnInvalidIssueIdError() {
        String baseUrl = "/issues/invalid/comments";

        // when a post request is received with an invalid issue id
        ResponseEntity<ApiError> response =
                restTemplate.postForEntity(baseUrl, comment, ApiError.class);

        // then a 400 'invalid issue id' error should be returned
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
        assertThat(response.getBody().getErrorMessage()).containsIgnoringCase("Invalid issue id");
        assertThat(response.getBody().getTimestamp()).isNotNull();
    }

    @AfterEach
    public void teardown() {
        issueRepository.deleteAll();
    }
}
