package com.habibInc.issueTracker.comment;

import com.habibInc.issueTracker.exceptionhandler.ApiError;
import com.habibInc.issueTracker.issue.Issue;
import com.habibInc.issueTracker.issue.IssueService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.time.LocalDateTime;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class CommentIT {
    @Autowired
    TestRestTemplate restTemplate;

    @Autowired
    IssueService issueService;

    Issue issue;
    Comment comment;

    @BeforeEach
    public void setup() {

        // set up an issue
        issue = new Issue();

        issue.setId(1L);
        issue.setSummary("This is an issue");

        // set up a new comment
        comment = new Comment();

        comment.setContent("My comment");
        comment.setOwner("Me");

        comment.setCreationTime(LocalDateTime.now());
        comment.setUpdateTime(LocalDateTime.now());

        comment.setIssue(issue);
    }

    @Test
    public void itShouldCreateComment() {
        // make post request to create a new comment
        ResponseEntity<Comment> response = restTemplate.postForEntity("/comments", comment, Comment.class);

        // expect comment to have been created with an autogenerated positive id
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody().getId()).isNotNull().isPositive();
        assertThat(response.getBody()).isEqualToComparingOnlyGivenFields(comment);
    }

    @Test
    public void itShouldReturnIssueNotFoundError() {
        issueService.createIssue(issue);

        ResponseEntity<ApiError> response = restTemplate.postForEntity("/comments", comment, ApiError.class);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }
}
